--laying the foundation:
 Topics
    ● JSX
    ● React.createElement vs JSX
    ● Benefits of JSX
    ● Behind the Scenes of JSX
    ● Babel & parcel role in JSX
    ● Components
    ● Functional Components
    ○ Composing Component

  -jsx:
    JSX is a syntax extension for JavaScript that allows you to write HTML-like code in your JavaScript files.
    JSX is a way to write HTML in JavaScript files.
  
-React.createElement vs JSX:
    JSX is a syntax extension for JavaScript that allows you to write HTML-like markup inside a JavaScript file. It's a more concise and readable way to create React elements.
     Example: const h1 = <h1>Hello world</h1>;
        JSX is an transpiller React element
        JSX used a library 'Babel' in order to use as same a like HTML
        Note: JSX is not HTML code but act as same alike

-React.createElement is a function that creates a React element. It takes three arguments: the type of the element, the props of the element, and the children of the element.
     Example: const h1 = React.createElement("h1", null, "Hello world");\

    //compliling line: ReactElement
        ReactElement => javaScript[Object]

    //compliling line: JSX
        JSX[Babel] => ReactElement => javaScript[Object]

        Both Together:
        JSX[Babel] => ReactElement => javaScript[Object] =>HTML(Render)

-Benefits of JSX:
    -Simplifies code and makes it more elegant
    -Easier to create and maintain React components
    -Enables using full power of JavaScript within HTML-like code
    -Allows React to show more useful error and warning messages
    -Faster than normal JavaScript code due to optimizations
    -Easy to use for those familiar with HTML

-components:
 Components are reusable pieces of code that represent UI elements or a portion of your application.
 There are two types of components:
 1. Class Components
 2. Functional Components (00% of the times we will be used)
    syntax:
        const component=()=>(
            <h1>Hello from functional component</h1>
        );
    we commonly practice two, way of writting the component:
        1.  const Component=()=>(
                <h1>Hello from functional component</h1>
            );
        2.(common standard to use) const Component=()=>{
            return  <h1>Hello from functional component</h1>
            };
    Note: always have the component naming starts with capital letter... jus an convention

-component composition:Component composition in React is building complex UIs by combining smaller, 
    independent components, promoting code reusability and modularity.
        -Components can be nested inside each other
        -Components can be reused throughout the application
        -Components can be passed props to customize their behavior
        -Components can be used to create complex UI elements

        Example:
            // creating an external component
            const Com=()=>{
                return(
                    <div>Hello</div>
                )
            } Note: we can also write normal function too... since much used in industry
           
            //creating the main component
            const App=()=>{ //WRONG WAY
                return(
                    <h1>Main block</h1>
                    <Com/> //NOTE: this will not work, since as experienced, we should always embed inside any tag comonly used as div tag
                )
            }
            const App=()=>{ //RIGHT WAY
                return(
                 <div>   // Notice: here we have embeded the div
                    <h1>Main block</h1>
                    <Com/> //NOTE: this will not work, since as experienced, we should always embed inside any tag comonly used as div tag
                 </div>    
                )
            }

-Embeding the javaScript into an JSX:
 To embed a js into jsx we need to use curly braces i.e {}
 Example: // inside the {} braces, we can use any js logic, write from buisness logic to consoleLog:)
    const num=1000;
    const num2=10;
    const Heading=()=>{
        return(
            <div>
            <h1>Heading</h1>
            {num} //1000
            {console.log(num)}//10 will get to se in console
            </div>
        )
}    


        

       

 

    


